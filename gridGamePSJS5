//Initial Creation 6/5/22
/* here I will try to create the different states of the game - 
for example I want to start with a loading screen and then have person a place there bombs 
then person b place their bombs 
let timeLimit = 5;
let countdown;

setup frameRate(30)

let currentTime = int(millis() / 1000);
countDown = timeLimit - currentTime;

if(countDown < 0) {
 countDown = 0;
  gameState++;
}

textSize(24);
fill(0,102, 153);
text("TIME: " + currentTime, 30, 380);
fill(0);

*/

/* implement bfs so that there is ensured a path to get to the final location */

window.addEventListener("keydown", function(e) {
    if(["Space","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].indexOf(e.code) > -1) {
        e.preventDefault();
    }
}, false); 

let timeLimit = 5;
let countdown;


var gameState = 0;
/*
0: spash, transition on: press start
1: ready to place bombs p1: press enter
2: p1 placing transition on: transition on timer
3: ready to place bombs p2: enter
4: p2 placing: timer
5: ready to race?: endter
6: racing! transition: win
7: results: play again button
*/

// location of player
var player1X = 0;
var player1Y = 0;
var player2X = 0;
var player2Y = 0;

//for some reason couldn't put in mouse pressed 
// bombs
var rowdex = -1;
var coldex = -1;

var gridWidth = 13;
var gridHeight = 13;
var cellSize = 30;
var playerSize = cellSize/2;
var bombArray = [...Array(gridWidth)].map(e => Array(gridHeight).fill(0));
var bombArray1 = [...Array(gridWidth)].map(e => Array(gridHeight).fill(0));
var bombArray2 = [...Array(gridWidth)].map(e => Array(gridHeight).fill(0));

console.log(bombArray)

var gridX = 25;
var gridY = 80;

var gridX2 = 500;
var gridY2 = 80;

var totalBombs = 10;
var bombsLeft = totalBombs;
var player1Intent = 0;
var player2Intent = 0;

//vars having to do with the first gameState
var startButtonX = 40
var startButtonY = 50
var startButtonW = 70
var startButtonH = 50

var beginButtonX = 40
var beginButtonY = 100
var beginButtonW = 70
var beginButtonH = 50

var bombButtonX = gridX + cellSize * gridWidth + 50
var bombButtonY = gridY + 75
var bombButtonW = 70
var bombButtonH = 35

function setup() {
    createCanvas(1400, 600);
    background(0);    
    stroke(0,0,255);
    frameRate(30)
}



function draw() {
 
    background(0);
    if(gameState == 0) {
       gameState0()
    } else if(gameState == 1) {
      gameState1()
    } else if(gameState == 2) {
      gameState2()
    } else if(gameState == 3) {
      gameState3()
    } else if(gameState == 4) {
      gameState4()
    } else if(gameState == 5) {
      gameState5()
    } else if(gameState == 6) {
      gameState6()
    } else {
      print("gamestate error");
          drawGrid();
    drawPlayer(player1X, player1Y);
    drawPlayer(player2X, player2Y);
    drawBombs();  
    fill(255);
    text("player 1 place your bombs!",10,30);
    text("bombs left:" + bombsLeft, gridX + cellSize * gridWidth + 50, gridY + 50);
    }
}

function gameState0() {
   fill(255);
   text("Welcome!", gridX/2, gridY/3);
   
  drawButton("Start!", "green", startButtonX, startButtonY, startButtonW, startButtonH)
}

function gameState1() {
   fill(255);
   text("Player 1 press Begin! to place your bombs!", gridX/2, gridY/3);
   text("You have 30 seconds!", gridX/2, gridY/3 + 30);
   
   drawButton("Begin!", "green", beginButtonX, beginButtonY, beginButtonW, beginButtonH)
}

function gameState2() {
    drawGrid();
    drawBombs();  
    fill(255);
    text("player 1 place your bombs!",10,30);
    text("bombs left:" + bombsLeft, gridX + cellSize * gridWidth + 50, gridY + 50);
    if(bombsLeft > 0) {
      drawButton("Placing!", "grey", bombButtonX, bombButtonY, bombButtonW, bombButtonH)
    } else {
      drawButton("ready!", "green", bombButtonX, bombButtonY, bombButtonW, bombButtonH)
    }

}

function gameState3() {
   fill(255);
   text("Player 2 press Begin! to place your bombs!", gridX/2, gridY/3);
   text("You have 30 seconds!", gridX/2, gridY/3 + 30);
   
   drawButton("Begin!", "green", beginButtonX, beginButtonY, beginButtonW, beginButtonH)
}

function gameState4() {
    drawGrid();
    drawBombs();  
    fill(255);
    text("player 2 place your bombs!",10,30);
    text("bombs left:" + bombsLeft, gridX + cellSize * gridWidth + 50, gridY + 50);
    if(bombsLeft > 0) {
      drawButton("Placing!", "grey", bombButtonX, bombButtonY, bombButtonW, bombButtonH)
    } else {
      drawButton("ready!", "green", bombButtonX, bombButtonY, bombButtonW, bombButtonH)
    }
}

function gameState5() {
  fill(255);
  text("Player 1 place your fingers on WASD! Player 2 place your fingers on the arrow keys! Both players repectively press UP to begin", gridX/2, gridY/3);
  let currentTime = int(millis() / 1000);
  countDown = timeLimit - currentTime;

if(countDown < 0) {
 countDown = 0;
  gameState++;
}

textSize(24);
fill(0,102, 153);
text("TIME: " + currentTime, 30, 70);

}

function timer() {
    var fiveMinutes = 60 * 5,
        display = document.querySelector('#time');
    startTimer(fiveMinutes, display);
}


function gameState6() {
  fill(255);
  text("Reach your goal!", gridX/2, gridY/3);
  
    //player1 
    drawGrid();
    drawBombs();  
    drawPlayer(player1X, player1Y);
    
    //player 2
    drawGrid2()
    drawBombs2()
    drawPlayer2(player2X, player2Y);
}

function drawButton(bText, bColor, locationX, locationY, bWidth, bHeight) {
  if(bColor == "red") {
    fill(255, 0, 0);
  } else if(bColor == "green") {
    fill(0,255,0)
  }
  else if(bColor == "grey") {
    fill(128,128,128)
  } else {
    fill(0,0,255);
  }
  rect(locationX, locationY, bWidth, bHeight)
  fill(255);
  text(bText,locationX + bWidth/4,locationY + bHeight/2);
  

}

function mousePressed() {
  if(gameState == 2 | gameState == 4) {
    checkBombPlace()
  }
} 

function mouseReleased() {
  
  if(gameState == 0 && mouseX > startButtonX && 
  mouseX < startButtonX + startButtonW && 
  mouseY > startButtonY && mouseY < startButtonY + startButtonH) {
    startButtonClicked() 
  }
  if(gameState == 1 && mouseX > beginButtonX && 
  mouseX < beginButtonX + beginButtonW && 
  mouseY > beginButtonY && mouseY < beginButtonY + beginButtonH) {
    begin1ButtonClicked() 
  }
  if((gameState == 2 | gameState == 4) && mouseX > bombButtonX && 
  mouseX < bombButtonX + bombButtonW && 
  mouseY > bombButtonY && mouseY < bombButtonY + beginButtonH && bombsLeft == 0) {
    bombButtonClicked() 
  }
  if(gameState == 3 && mouseX > beginButtonX && 
  mouseX < beginButtonX + beginButtonW && 
  mouseY > beginButtonY && mouseY < beginButtonY + beginButtonH) {
    begin2ButtonClicked() 
    bombsLeft = totalBombs;
    bombArray1 = bombArray
    bombArray = bombArray2
  }
  if(gameState == 5) {
    //timer()
    var tempX = gridX2;
    var tempY = gridY2;
    gridX2 = gridX;
    gridY2 = gridY;
    gridX = tempX;
    gridY = tempY
  }
  
}


function startButtonClicked() {
  gameState++;
  print("button clicked");
}

function begin1ButtonClicked() {
  gameState++;
  print("button1 clicked");
}

function bombButtonClicked() {
  if(gameState == 4) {
    bombArray2 = bombArray;
  }
  gameState++;
  print("button1 clicked");
}

function begin2ButtonClicked() {
  gameState++;
  print("button3 clicked");
}

function player1Reset() {
  player1X = 0;
  player1Y = 0;
  drawPlayer(player1X, player1Y);
}

function player2Reset() {
  player2X = 0;
  player2Y = 0;
  drawPlayer(player2X, player2Y);
}

function drawPlayer(thisX, thisY) {
  fill(255,0,0);
  ellipse(thisX * cellSize + gridX + cellSize/2, thisY * cellSize + gridY + cellSize/2, playerSize, playerSize);
}

function drawPlayer2(thisX, thisY) {
  fill(255,0,0);
  ellipse(thisX * cellSize + gridX2 + cellSize/2, thisY * cellSize + gridY2 + cellSize/2, playerSize, playerSize);
}

function drawGrid() {
    fill(255);
    rect(gridX, gridY, cellSize * gridWidth, cellSize * gridHeight);
    for(var i = 1; i < gridHeight; i++) {
      var y = i*cellSize + gridY;
      line(gridX, y, cellSize * gridWidth + gridX, y); 
    }
    for(i = 1; i < gridWidth; i++) {
      var x = i*cellSize + gridX;
      line(x, gridY, x, cellSize * gridHeight + gridY);
    }
  
}

function drawGrid2() {
    fill(255);
    rect(gridX2, gridY2, cellSize * gridWidth, cellSize * gridHeight);
    for(var i = 1; i < gridHeight; i++) {
      var y = i*cellSize + gridY2;
      line(gridX2, y, cellSize * gridWidth + gridX2, y); 
    }
    for(i = 1; i < gridWidth; i++) {
      var x = i*cellSize + gridX2;
      line(x, gridY2, x, cellSize * gridHeight + gridY2);
    }
  
}
function drawBombs() {
  if(gameState == 4) {
    bombArray = bombArray2
  } else {
    bombArray = bombArray1
  }
  
   for(var i = 0; i < gridHeight; i++) {
      for(var j = 0; j < gridWidth; j++) {
        if(bombArray[i][j] == 1) {
          fill(0);
          var bombX = j*cellSize + gridX + cellSize/2;
          var bombY = i*cellSize + gridY + cellSize/2;
          
          if(bombX == player1X && bombY == player1Y) { // track a collision between a bomb and the prayer
             if(bombArray[rowdex][coldex] == 1) { //erase the bomb
                //if true set to false/false set to true
                  bombArray[rowdex][coldex] = 0;
              } else {
                  bombArray[rowdex][coldex] = 1;
              }
              //player1Reset();
          } 
          // end collision tracking
          fill(0);
          ellipse(bombX, bombY, playerSize, playerSize);
        }
      }
    }
}

function drawBombs2() {
 bombArray = bombArray2

 for(var i = 0; i < gridHeight; i++) {
    for(var j = 0; j < gridWidth; j++) {
      if(bombArray[i][j] == 1) {
        fill(0);
        var bombX = j*cellSize + gridX2 + cellSize/2;
        var bombY = i*cellSize + gridY2 + cellSize/2;
        
        fill(0);
        ellipse(bombX, bombY, playerSize, playerSize);
      }
    }
  }
}

function deleteBomb(locationX, locationY, whichBombArray) {
  switch(whichBombArray) {
    case 1:
      bombArray1[locationX][locationY] = 0;
      break;
    case 2:
      bombArray2[locationX][locationY] = 0;
      break;
  }
}

function checkBombPlace() {
    rowdex = -1;
  coldex = -1;
  var i = 1;
  // goal is to map the locations of each mouse press to a square in the grid
    for(i = 1; i <= gridHeight; i++) {
      if((mouseY < i * cellSize + gridY) && mouseY > gridY) {
        rowdex = i - 1;
        break;
      }
    }
    for(i = 1; i <= gridWidth; i++) {
      if((mouseX < i * cellSize + gridX) && mouseX > gridX) {
        coldex = i - 1;
        break;
      }
    }
  if(rowdex >= 0 && coldex >= 0){
  if(bombArray[rowdex][coldex] == 1) {     //if true set to false/false set to true
    // deleting bomb
    bombsLeft++;
    bombArray[rowdex][coldex] = 0;
    } else { 
    // adding a bomb
    if(bombsLeft > 0) {
    bombsLeft--;
    bombArray[rowdex][coldex] = 1;
    }
  }
  }
  print("success")
}





/////
function startTimer(duration, display) {
    var timer = duration, minutes, seconds;
    setInterval(function () {
        minutes = parseInt(timer / 60, 10);
        seconds = parseInt(timer % 60, 10);

        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;

        display.textContent = minutes + ":" + seconds;

        if (--timer < 0) {
            timer = duration;
        }
    }, 1000);
}























//////////////////////////////////////
// KEY PRESSING LOGIC
//////////////////////////////////////





function keyPressed() {
  checkPlayer1Move();
  checkPlayer2Move();
  if(gameState == 5) {
    /*
    if(player1Intent == 1 && player2Intent == 1) {
      gameState++;
    } */
    if (keyCode == UP_ARROW && keyCode == 'w') {
      gameState++;
    }
  }
}
  
  
  
 var player1Timer
 var tickRate = 250
 
 function checkPlayer1Move() {
  print(key);
  if (keyCode == UP_ARROW  || keyCode == DOWN_ARROW  || keyCode == LEFT_ARROW || keyCode == RIGHT_ARROW) {
    if (keyCode == UP_ARROW && player1Y != 0) {
              movePlayer1(1);
      if (player1Intent == 0) {
        player1Intent = 1
        player1Timer = setInterval(player1Tick, tickRate); 
      }
    } else if (keyCode == DOWN_ARROW && player1Y != gridHeight - 1) {
            movePlayer1(3);
       if (player1Intent == 0) {
        player1Intent = 3 
        player1Timer = setInterval(player1Tick, tickRate); 
      }
    } 
    else if (keyCode == LEFT_ARROW && player1X != 0) {
            movePlayer1(4);

       if (player1Intent == 0) {
        player1Intent = 4 
        player1Timer = setInterval(player1Tick, tickRate); 
      }
    } else if (keyCode == RIGHT_ARROW && player1X != gridWidth - 1) {
            movePlayer1(2);

      if (player1Intent == 0) {
        player1Intent = 2 
        player1Timer = setInterval(player1Tick, tickRate); 
      }
    } 
  }
 }
   
  var player2Timer
  function checkPlayer2Move() {
  print(key);
  if (key == 'w'  || key == 's'  || key == 'a' || key == 'd') {
    if (key == 'w' && player2Y != 0) {
        movePlayer2(1)
      if (player2Intent == 0) {
        player2Intent = 1
        player2Timer = setInterval(player2Tick, tickRate); 
      }
    } else if (key == 's' && player2Y != gridHeight - 1) {
           movePlayer2(3)
       if (player2Intent == 0) {
        player2Intent = 3 
        player2Timer = setInterval(player2Tick, tickRate); 
      }
    } 
    else if (key == 'a' && player2X != 0) {
           movePlayer2(4)
       if (player2Intent == 0) {
        player2Intent = 4 
        player2Timer = setInterval(player2Tick, tickRate); 
      }
    } else if (key == 'd' && player2X != gridWidth - 1) {
           movePlayer2(2)
      if (player2Intent == 0) {
        player2Intent = 2 
        player2Timer = setInterval(player2Tick, tickRate); 
      }
    } 
  }
 }
 

function keyReleased() {
  if ((keyCode == UP_ARROW && player1Intent == 1)  || 
     (keyCode == RIGHT_ARROW && player1Intent == 2) ||
     (keyCode == DOWN_ARROW && player1Intent == 3) ||
     (keyCode == LEFT_ARROW && player1Intent == 4)) {
    print("RELEASED: " + keyCode)
    player1Intent = 0;
    clearInterval(player1Timer)
   }
   
   if ((key == 'w' && player2Intent == 1)  || 
     (key == 'd' && player2Intent == 2) ||
     (key == 's' && player2Intent == 3) ||
     (key == 'a' && player2Intent == 4)) {
    print("RELEASED: " + keyCode)
    player2Intent = 0;
    clearInterval(player2Timer)
   }
}



function player1Tick() {
  print("I'M TICKING");
  if (player1Intent != 0) {
    movePlayer1(player1Intent)
  }
}

function player2Tick() {
  print("I'M TICKING PLAYER 2");
  if (player2Intent != 0) {
     movePlayer2(player2Intent)
  }
}

// created because should do the bomb check 
//at the right time when there is an intention to move to a location with a bomb
// note had to swap the way I'm indexing from the player movement because bomb array is row column, X's are colums
function movePlayer1(direction) {
  print("move player 1 function is called");
     switch (direction) {
       case 1: 
         if (player1Y != 0) {
           if (bombArray1[player1Y - 1][player1X] == 1) {
            // THEY ARE ABOUT TO STEP ON A BOMB! DO SOMETHING!
            print("collision up")
            //deleteBomb(player1Y - 1, player1X, 1)
            player1Y--;
            player1Reset();
           } else {
             player1Y--;
           }
         }
         break;
       case 2: 
         if (player1X != gridWidth - 1) {
           if (bombArray1[player1Y][player1X + 1] == 1) {
            print("collision right")
            //deleteBomb(player1Y, player1X + 1, 1)
            player1X++;
            player1Reset();
           } else {
             player1X++; 
           }
         }
         break;
       case 3: 
       if (player1Y != gridHeight - 1) {
         if (bombArray1[player1Y + 1][player1X] == 1) {
           print("collision down");
            //deleteBomb(player1Y + 1, player1X, 1)
            player1Y++;
            player1Reset();
         } else {
            player1Y++;
         }
       }
         break;
       case 4: 
          if (player1X != 0) {
           if (bombArray1[player1Y][player1X - 1] == 1) {
             print("collision left")
            //deleteBomb(player1Y, player1X - 1, 1)
            player1X--;
            player1Reset();
           } else {
             player1X--;
           }
          }
       break;
     }
       
}

function movePlayer2(direction) {
  print("move player 1 function is called");
     switch (direction) {
       case 1: 
         if (player2Y != 0) {
           if (bombArray2[player2Y - 1][player2X] == 1) {
            // THEY ARE ABOUT TO STEP ON A BOMB! DO SOMETHING!
            print("collision up")
            //deleteBomb(player1Y - 1, player1X, 1)
            player2Y--;
            player2Reset();
           } else {
             player2Y--;
           }
         }
         break;
       case 2: 
         if (player2X != gridWidth - 1) {
           if (bombArray2[player2Y][player2X + 1] == 1) {
            print("collision right")
            //deleteBomb(player1Y, player1X + 1, 1)
            player2X++;
            player2Reset();
           } else {
             player2X++; 
           }
         }
         break;
       case 3: 
       if (player2Y != gridHeight - 1) {
         if (bombArray2[player2Y + 1][player2X] == 1) {
           print("collision down");
            //deleteBomb(player1Y + 1, player1X, 1)
            player2Y++;
            player2Reset();
         } else {
            player2Y++;
         }
       }
         break;
       case 4: 
          if (player2X != 0) {
           if (bombArray2[player2Y][player2X - 1] == 1) {
             print("collision left")
            //deleteBomb(player1Y, player1X - 1, 1)
            player2X--;
            player2Reset();
           } else {
             player2X--;
           }
          }
       break;
     }
       
}
